function fs_cvn_print2nd(conStruct, glmFolder, clusterSigFn, outPath, extraopts)
% fs_cvn_print2nd(conStruct, [glmFolder = {'glm-group'}, ...
% clusterSigFn = 'perm.th30.abs.sig.cluster.nii.gz', outPath = pwd])
%
% This function prints the results of second level (group level) analysis.
% 'perm.th30.abs.sig.cluster.nii.gz' usually is the significant clusters
% after multiple comparison corrections and 'sig.nii.gz' is the "raw"
% p-values before corrections.
%
% Inputs:
%    conStruct      <struct> generated by fs_isxconcat.m. (Includes the
%                    .group, .analysisName, .contrastName.)
%    glmFolder      <string> the name of the glm output folder.
%                OR <string cell> path to the glm folders and anaStrcut
%                    will be ignored.
%    clusterSigFn   <string> the filename of the cluster p value file
%                    (e.g., perm.th30.abs.sig.cluster.nii.gz by default).
%    outPath        <string> where to save the output images. [current
%                    folder by default].
%
% Output:
%    images of group-level results saved at outPath.
%
% Created by Haiyang Jin (13-Apr-2020)

if ~exist('glmFolder', 'var') || isempty(glmFolder)
    glmFolder = {'glm-group'};
elseif ischar(glmFolder)
    glmFolder = {glmFolder};
end

if ~exist('clusterSigFn', 'var') || isempty(clusterSigFn)
    clusterSigFn = 'perm.th30.abs.sig.cluster.nii.gz';
end

% output path
if ~exist('outPath', 'var') || isempty(outPath)
    outPath = fullfile(pwd, 'Group_level_results');
end
if ~exist(outPath, 'dir'); mkdir(outPath); end

if ~exist('extraopts', 'var') || isempty(extraopts)
    extraopts = [];
end

% check if glmFolder are paths
isPath = cellfun(@(x) ~isempty(fileparts(x)), glmFolder);

% create path to glm folder
if all(isPath)
    glmPath = glmFolder;
elseif all(~isPath)
    glmPath = fullfile(getenv('FUNCTIONALS_DIR'), {conStruct.group}, ...
        {conStruct.analysisName}, {conStruct.contrastName}, glmFolder);
end

% create path to the cluster p-value file
theFiles = fullfile(glmPath, 'osgm', clusterSigFn);

% only keep the files for left hemisphere
leftFiles = theFiles';
leftFiles(contains(leftFiles, 'rh')) = [];
% find the corresponding files for right hemisphere
rightFiles = strrep(leftFiles, 'lh', 'rh');

% combine files for left and right hemispheres
surfs = [leftFiles, rightFiles];

% read the file into structure(s)
surfStruct = arrayfun(@(x) fs_cvn_valstruct(surfs(x, :)), ...
    1:size(surfs, 1), 'uni', false);

% calculate the maximum of the absolute data values 
tempMax = max(cellfun(@(x) max(abs(x.data)), surfStruct));

% use the minimum 5*Integer as the maximum limit
climMax = ceil(tempMax/5)*5;

% generate figures
clim0 = [-climMax climMax];
cmap0 = jet(256);  % use jet(256) as the colormap
thresh0 = 1.3i;  % absolute value of 1.3 (p = 0.05)
lookup = [];
wantfig = 2;  % do not show figure with fs_cvn_lookuplmv.m

for iSurf = 1: size(surfs, 1)
    
    % this pair of surfaces
    valstruct = surfStruct{iSurf};
        
    % generate figures for this pair
    [lookup, rgbimg] = fs_cvn_lookuplmv('fsaverage', valstruct, clim0, ...
        cmap0, thresh0, lookup, wantfig, extraopts);
    
    % set the figure name and save it
    fig = figure('Visible','off');
    imshow(rgbimg); % display lookup results (imagesc + colorbar)

    % obtain the contrast name as the figure name
    theConName = unique(cellfun(@(x) fs_2contrast(x, filesep), surfs(iSurf, :), 'uni', false));
    set(fig, 'Name', theConName{1});
    
    colorbar;
    colormap(cmap0);
    caxis(clim0);
    
    % print the figure
    print(fig, fullfile(outPath, theConName{1}),'-dpng');
    
end

end